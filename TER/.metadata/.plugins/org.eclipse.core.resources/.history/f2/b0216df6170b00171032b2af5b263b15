/*
 * generated by Xtext 2.10.0
 */
package org.xtext.ter_metamodel.ecfdl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.ter_metamodel.ecfdl.ecfd.Boite
import org.xtext.ter_metamodel.ecfdl.ecfd.Ecfd

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ECFDLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		//A AMELIORER: passer les "boites" aux fonctions et non la resource complete
		//val ecfd= resource.allContents.filter(typeof(Ecfd)) //-> pour gérer plusieurs ECFD ?
		//val boites= resource.allContents.toIterable.filter(typeof(Boite))
		
		
		
		fsa.generateFile(resource.getURI().lastSegment() +'.gv', 
			'''
digraph ''' + Ecfd.name + '''{
ratio = "auto";
label=''' + Ecfd.name + ''';'''+
resource.buildBoite + 
resource.buildRelation + 
resource.buildMutex
			
			
			)
	}
	
	def getFeatures(Boite b) //ajouter les doubles quote
							// double << ou simple ?
	'''"«FOR f : b.feature»«f.name»«ENDFOR»"'''
	
	def printBox (Boite b)
	'''[«IF b.racine»root=true,«ENDIF»shape=box, regular=1, style=filled, fillcolor=white];
	'''
	
	def buildBoite(Resource r)
	'''
	«FOR b:r.allContents.toIterable.filter(typeof(Boite)) »
	«b.getFeatures»«b.printBox»
	«ENDFOR»
	'''
	
	//Changer les couleurs !
	
	def buildRelation(Resource r)
	'''
	«FOR b : r.allContents.toIterable.filter(typeof(Boite))»
		«FOR relationSimple : b.boiteEnfant »
			«relationSimple.getFeatures» -> «b.getFeatures» [color=black];
		«ENDFOR»
		«FOR relationGroupe : b.groupeEnfant»
			«relationGroupe.name» [shape=box, style=filled,«IF relationGroupe.exclusif»label="OR"«ELSE»label="XOR"«ENDIF», height=.1,width=.1];«b.name» -> «relationGroupe.name» [dir=back, color=black];
			«FOR enfant : relationGroupe.boite»
				«relationGroupe.name» -> «enfant.getFeatures» [dir = none, color=black];
			«ENDFOR»
		«ENDFOR»
	«ENDFOR»
	'''
	
	def buildMutex (Resource r)
	'''
	«FOR b : r.allContents.toIterable.filter(typeof(Boite))»
		«FOR m : b.mutex»
			«m.name» [shape=box, style=filled, label="MX", height=0, width=0];
			«FOR bm : m.boite »
				«bm.name» -> «m.name»  [dir=none];
			«ENDFOR»
		«ENDFOR»
	«ENDFOR»
	'''
}
