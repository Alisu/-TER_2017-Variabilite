/**
 * generated by Xtext 2.10.0
 */
package org.xtext.ter_metamodel.ecfdl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.ter_metamodel.ecfdl.ecfd.Box;
import org.xtext.ter_metamodel.ecfdl.ecfd.Ecfd;
import org.xtext.ter_metamodel.ecfdl.ecfd.Element;
import org.xtext.ter_metamodel.ecfdl.ecfd.Feature;
import org.xtext.ter_metamodel.ecfdl.ecfd.GroupBox;
import org.xtext.ter_metamodel.ecfdl.ecfd.Mutex;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ECFDLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    final Iterable<Ecfd> ecfdList = Iterables.<Ecfd>filter(_iterable, Ecfd.class);
    for (final Ecfd ecfd : ecfdList) {
      String _name = ecfd.getName();
      String _plus = (_name + ".gv");
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("digraph ");
      String _name_1 = ecfd.getName();
      String _plus_1 = (_builder.toString() + _name_1);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("{");
      _builder_1.newLine();
      _builder_1.append("ratio = \"auto\";");
      _builder_1.newLine();
      _builder_1.append("label=");
      String _plus_2 = (_plus_1 + _builder_1);
      String _name_2 = ecfd.getName();
      String _plus_3 = (_plus_2 + _name_2);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append(";");
      _builder_2.newLine();
      String _plus_4 = (_plus_3 + _builder_2);
      CharSequence _buildbox = this.buildbox(ecfd);
      String _plus_5 = (_plus_4 + _buildbox);
      CharSequence _buildRelation = this.buildRelation(ecfd);
      String _plus_6 = (_plus_5 + _buildRelation);
      CharSequence _buildMutex = this.buildMutex(ecfd);
      String _plus_7 = (_plus_6 + _buildMutex);
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("}");
      String _plus_8 = (_plus_7 + _builder_3);
      fsa.generateFile(_plus, _plus_8);
    }
  }
  
  public CharSequence getFeatures(final Box b) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    {
      EList<Feature> _feature = b.getFeature();
      for(final Feature f : _feature) {
        String _name = f.getName();
        _builder.append(_name, "");
        _builder.append(" ");
      }
    }
    _builder.append("\"");
    return _builder;
  }
  
  public CharSequence printBox(final Box b) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    {
      boolean _isRoot = b.isRoot();
      if (_isRoot) {
        _builder.append("root=true,");
      }
    }
    _builder.append("shape=box, regular=1, style=filled, fillcolor=white];");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence buildbox(final Ecfd e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Element> _boxes = e.getBoxes();
      Iterable<Box> _filter = Iterables.<Box>filter(_boxes, Box.class);
      for(final Box b : _filter) {
        CharSequence _features = this.getFeatures(b);
        _builder.append(_features, "");
        CharSequence _printBox = this.printBox(b);
        _builder.append(_printBox, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public Box getBox(final Element element) {
    return this.getBox(element);
  }
  
  public CharSequence buildRelation(final Ecfd e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Element> _boxes = e.getBoxes();
      Iterable<Box> _filter = Iterables.<Box>filter(_boxes, Box.class);
      for(final Box b : _filter) {
        {
          EList<Box> _childBox = b.getChildBox();
          for(final Box relation : _childBox) {
            _builder.append("subgraph ");
            String _name = relation.getName();
            _builder.append(_name, "");
            _builder.append(" {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            CharSequence _features = this.getFeatures(b);
            _builder.append(_features, "\t");
            _builder.append(" -> ");
            CharSequence _features_1 = this.getFeatures(relation);
            _builder.append(_features_1, "\t");
            _builder.append("  [color=blue, dir=back];");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          EList<GroupBox> _childGroup = b.getChildGroup();
          for(final GroupBox groupRelation : _childGroup) {
            _builder.append("subgraph ");
            String _name_1 = groupRelation.getName();
            _builder.append(_name_1, "");
            _builder.append(" {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            String _name_2 = groupRelation.getName();
            _builder.append(_name_2, "\t");
            _builder.append(" [style=filled,");
            {
              boolean _isExclusif = groupRelation.isExclusif();
              if (_isExclusif) {
                _builder.append("label=\"XOR\"");
              } else {
                _builder.append("label=\"OR\"");
              }
            }
            _builder.append(", height=.1,width=.1];");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            CharSequence _features_2 = this.getFeatures(b);
            _builder.append(_features_2, "\t");
            _builder.append(" -> ");
            String _name_3 = groupRelation.getName();
            _builder.append(_name_3, "\t");
            _builder.append(" [dir=back, color=black];");
            _builder.newLineIfNotEmpty();
            {
              EList<Box> _box = groupRelation.getBox();
              for(final Box child : _box) {
                _builder.append("\t");
                String _name_4 = groupRelation.getName();
                _builder.append(_name_4, "\t");
                _builder.append(" -> ");
                CharSequence _features_3 = this.getFeatures(child);
                _builder.append(_features_3, "\t");
                _builder.append(" [dir = none, color=black];");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence buildMutex(final Ecfd e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Mutex> _mutex = e.getMutex();
      for(final Mutex m : _mutex) {
        _builder.append("subgraph ");
        String _name = m.getName();
        _builder.append(_name, "");
        _builder.append("{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _name_1 = m.getName();
        _builder.append(_name_1, "\t");
        _builder.append(" [style=filled, label=\"MX\", height=0, width=0];");
        _builder.newLineIfNotEmpty();
        {
          EList<Box> _box = m.getBox();
          for(final Box bm : _box) {
            _builder.append("\t");
            CharSequence _features = this.getFeatures(bm);
            _builder.append(_features, "\t");
            _builder.append(" -> ");
            String _name_2 = m.getName();
            _builder.append(_name_2, "\t");
            _builder.append("  [dir=none color=red];");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder;
  }
}
