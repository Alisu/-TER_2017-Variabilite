/*
 * generated by Xtext 2.10.0
 */
package org.xtext.ter_metamodel.ecfdl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.ter_metamodel.ecfdl.ecfd.Box;
import org.xtext.ter_metamodel.ecfdl.ecfd.Ecfd;
import org.xtext.ter_metamodel.ecfdl.ecfd.EcfdPackage;
import org.xtext.ter_metamodel.ecfdl.ecfd.Feature;
import org.xtext.ter_metamodel.ecfdl.ecfd.File;
import org.xtext.ter_metamodel.ecfdl.ecfd.GroupBox;
import org.xtext.ter_metamodel.ecfdl.ecfd.Mutex;
import org.xtext.ter_metamodel.ecfdl.services.ECFDLGrammarAccess;

@SuppressWarnings("all")
public class ECFDLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ECFDLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EcfdPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EcfdPackage.BOX:
				sequence_Box(context, (Box) semanticObject); 
				return; 
			case EcfdPackage.ECFD:
				sequence_Ecfd(context, (Ecfd) semanticObject); 
				return; 
			case EcfdPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case EcfdPackage.FILE:
				sequence_File(context, (File) semanticObject); 
				return; 
			case EcfdPackage.GROUP_BOX:
				sequence_GroupBox(context, (GroupBox) semanticObject); 
				return; 
			case EcfdPackage.MUTEX:
				sequence_Mutex(context, (Mutex) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Element returns Box
	 *     Box returns Box
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         Root?='Root'? 
	 *         (superBox+=[Box|ID] superBox+=[Box|ID]*)? 
	 *         (groupbox+=[GroupBox|ID] groupbox+=[GroupBox|ID]*)? 
	 *         (childBox+=[Box|ID] childBox+=[Box|ID]*)? 
	 *         (childGroup+=[GroupBox|ID] childGroup+=[GroupBox|ID]*)? 
	 *         (mutex+=[Mutex|ID] mutex+=[Mutex|ID]*)? 
	 *         (feature+=Feature feature+=Feature*)?
	 *     )
	 */
	protected void sequence_Box(ISerializationContext context, Box semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Ecfd returns Ecfd
	 *
	 * Constraint:
	 *     (name=ID boxes+=Box boxes+=Box* (groups+=GroupBox boxes+=GroupBox*)? (mutex+=Mutex mutex+=Mutex*)?)
	 */
	protected void sequence_Ecfd(ISerializationContext context, Ecfd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     name=EString?
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     File returns File
	 *
	 * Constraint:
	 *     (ecfd+=Ecfd ecfd+=Ecfd*)
	 */
	protected void sequence_File(ISerializationContext context, File semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns GroupBox
	 *     GroupBox returns GroupBox
	 *
	 * Constraint:
	 *     (name=ID Exclusif?='Exclusif'? superBox+=[Box|ID] box+=[Box|ID] box+=[Box|ID]+)
	 */
	protected void sequence_GroupBox(ISerializationContext context, GroupBox semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mutex returns Mutex
	 *
	 * Constraint:
	 *     (name=ID box+=[Box|ID] box+=[Box|ID]+)
	 */
	protected void sequence_Mutex(ISerializationContext context, Mutex semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
