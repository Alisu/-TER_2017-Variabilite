/**
 * generated by Xtext 2.10.0
 */
package org.xtext.ter_metamodel.ecfdl.ecfd.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.ter_metamodel.ecfdl.ecfd.Box;
import org.xtext.ter_metamodel.ecfdl.ecfd.EcfdPackage;
import org.xtext.ter_metamodel.ecfdl.ecfd.Feature;
import org.xtext.ter_metamodel.ecfdl.ecfd.GroupBox;
import org.xtext.ter_metamodel.ecfdl.ecfd.Mutex;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Box</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.ter_metamodel.ecfdl.ecfd.impl.BoxImpl#isRoot <em>Root</em>}</li>
 *   <li>{@link org.xtext.ter_metamodel.ecfdl.ecfd.impl.BoxImpl#getGroupbox <em>Groupbox</em>}</li>
 *   <li>{@link org.xtext.ter_metamodel.ecfdl.ecfd.impl.BoxImpl#getChildBox <em>Child Box</em>}</li>
 *   <li>{@link org.xtext.ter_metamodel.ecfdl.ecfd.impl.BoxImpl#getChildGroup <em>Child Group</em>}</li>
 *   <li>{@link org.xtext.ter_metamodel.ecfdl.ecfd.impl.BoxImpl#getMutex <em>Mutex</em>}</li>
 *   <li>{@link org.xtext.ter_metamodel.ecfdl.ecfd.impl.BoxImpl#getFeature <em>Feature</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BoxImpl extends ElementImpl implements Box
{
  /**
   * The default value of the '{@link #isRoot() <em>Root</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRoot()
   * @generated
   * @ordered
   */
  protected static final boolean ROOT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRoot() <em>Root</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRoot()
   * @generated
   * @ordered
   */
  protected boolean root = ROOT_EDEFAULT;

  /**
   * The cached value of the '{@link #getGroupbox() <em>Groupbox</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroupbox()
   * @generated
   * @ordered
   */
  protected EList<GroupBox> groupbox;

  /**
   * The cached value of the '{@link #getChildBox() <em>Child Box</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildBox()
   * @generated
   * @ordered
   */
  protected EList<Box> childBox;

  /**
   * The cached value of the '{@link #getChildGroup() <em>Child Group</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildGroup()
   * @generated
   * @ordered
   */
  protected EList<GroupBox> childGroup;

  /**
   * The cached value of the '{@link #getMutex() <em>Mutex</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMutex()
   * @generated
   * @ordered
   */
  protected EList<Mutex> mutex;

  /**
   * The cached value of the '{@link #getFeature() <em>Feature</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeature()
   * @generated
   * @ordered
   */
  protected EList<Feature> feature;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BoxImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EcfdPackage.Literals.BOX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isRoot()
  {
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRoot(boolean newRoot)
  {
    boolean oldRoot = root;
    root = newRoot;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EcfdPackage.BOX__ROOT, oldRoot, root));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GroupBox> getGroupbox()
  {
    if (groupbox == null)
    {
      groupbox = new EObjectResolvingEList<GroupBox>(GroupBox.class, this, EcfdPackage.BOX__GROUPBOX);
    }
    return groupbox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Box> getChildBox()
  {
    if (childBox == null)
    {
      childBox = new EObjectResolvingEList<Box>(Box.class, this, EcfdPackage.BOX__CHILD_BOX);
    }
    return childBox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GroupBox> getChildGroup()
  {
    if (childGroup == null)
    {
      childGroup = new EObjectResolvingEList<GroupBox>(GroupBox.class, this, EcfdPackage.BOX__CHILD_GROUP);
    }
    return childGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Mutex> getMutex()
  {
    if (mutex == null)
    {
      mutex = new EObjectResolvingEList<Mutex>(Mutex.class, this, EcfdPackage.BOX__MUTEX);
    }
    return mutex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Feature> getFeature()
  {
    if (feature == null)
    {
      feature = new EObjectContainmentEList<Feature>(Feature.class, this, EcfdPackage.BOX__FEATURE);
    }
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EcfdPackage.BOX__FEATURE:
        return ((InternalEList<?>)getFeature()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EcfdPackage.BOX__ROOT:
        return isRoot();
      case EcfdPackage.BOX__GROUPBOX:
        return getGroupbox();
      case EcfdPackage.BOX__CHILD_BOX:
        return getChildBox();
      case EcfdPackage.BOX__CHILD_GROUP:
        return getChildGroup();
      case EcfdPackage.BOX__MUTEX:
        return getMutex();
      case EcfdPackage.BOX__FEATURE:
        return getFeature();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EcfdPackage.BOX__ROOT:
        setRoot((Boolean)newValue);
        return;
      case EcfdPackage.BOX__GROUPBOX:
        getGroupbox().clear();
        getGroupbox().addAll((Collection<? extends GroupBox>)newValue);
        return;
      case EcfdPackage.BOX__CHILD_BOX:
        getChildBox().clear();
        getChildBox().addAll((Collection<? extends Box>)newValue);
        return;
      case EcfdPackage.BOX__CHILD_GROUP:
        getChildGroup().clear();
        getChildGroup().addAll((Collection<? extends GroupBox>)newValue);
        return;
      case EcfdPackage.BOX__MUTEX:
        getMutex().clear();
        getMutex().addAll((Collection<? extends Mutex>)newValue);
        return;
      case EcfdPackage.BOX__FEATURE:
        getFeature().clear();
        getFeature().addAll((Collection<? extends Feature>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EcfdPackage.BOX__ROOT:
        setRoot(ROOT_EDEFAULT);
        return;
      case EcfdPackage.BOX__GROUPBOX:
        getGroupbox().clear();
        return;
      case EcfdPackage.BOX__CHILD_BOX:
        getChildBox().clear();
        return;
      case EcfdPackage.BOX__CHILD_GROUP:
        getChildGroup().clear();
        return;
      case EcfdPackage.BOX__MUTEX:
        getMutex().clear();
        return;
      case EcfdPackage.BOX__FEATURE:
        getFeature().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EcfdPackage.BOX__ROOT:
        return root != ROOT_EDEFAULT;
      case EcfdPackage.BOX__GROUPBOX:
        return groupbox != null && !groupbox.isEmpty();
      case EcfdPackage.BOX__CHILD_BOX:
        return childBox != null && !childBox.isEmpty();
      case EcfdPackage.BOX__CHILD_GROUP:
        return childGroup != null && !childGroup.isEmpty();
      case EcfdPackage.BOX__MUTEX:
        return mutex != null && !mutex.isEmpty();
      case EcfdPackage.BOX__FEATURE:
        return feature != null && !feature.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (Root: ");
    result.append(root);
    result.append(')');
    return result.toString();
  }

} //BoxImpl
